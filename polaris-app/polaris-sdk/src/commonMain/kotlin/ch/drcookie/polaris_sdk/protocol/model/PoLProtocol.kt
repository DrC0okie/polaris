package ch.drcookie.polaris_sdk.protocol.model

/**
 * Internal constants defining the byte sizes of fields in the PoL protocol.
 */
internal object Constants {
    const val ED25519_PK = 32
    const val SIG = 64
    const val PROTOCOL_NONCE = 16
    const val PHONE_ID = 8
    const val FLAGS = 1
    const val BEACON_ID = 4
    const val BEACON_COUNTER = 8
}

/**
 * Request sent from the phone to the beacon during a PoL transaction.
 *
 * @property flags Protocol-specific flags
 * @property phoneId The unique ID of the phone.
 * @property beaconId The unique ID of the target beacon.
 * @property nonce A random value generated by the phone to ensure the uniqueness of this transaction.
 * @property phonePk The public key of the phone.
 * @property phoneSig The phone signature
 */
@OptIn(ExperimentalUnsignedTypes::class)
public data class PoLRequest(
    public val flags: UByte,
    public val phoneId: ULong,
    public val beaconId: UInt,
    public val nonce: UByteArray,
    public val phonePk: UByteArray,
    public var phoneSig: UByteArray? = null,
) {
    init {
        require(nonce.size == Constants.PROTOCOL_NONCE) { "Invalid nonce size" }
        require(phonePk.size == Constants.ED25519_PK) { "Invalid phone PK size" }
        phoneSig?.let { require(it.size == Constants.SIG) { "Invalid signature size" } }
    }

    public companion object {
        /** The size in bytes of the data within a [PoLRequest] that is covered by the phone's signature. */
        public const val SIGNED_DATA_SIZE: Int =
            Constants.FLAGS + // 1
            Constants.PHONE_ID + // 8
            Constants.BEACON_ID + // 4
            Constants.PROTOCOL_NONCE + // 16
            Constants.ED25519_PK // 32

        /** The total packed size in bytes of a serialized, signed [PoLRequest]. */
        public const val PACKED_SIZE: Int = SIGNED_DATA_SIZE + Constants.SIG // 125 bytes
    }

    public override fun hashCode(): Int {
        var result = flags.hashCode()
        result = 31 * result + phoneId.hashCode()
        result = 31 * result + beaconId.hashCode()
        result = 31 * result + nonce.contentHashCode()
        result = 31 * result + phonePk.contentHashCode()
        result = 31 * result + (phoneSig?.contentHashCode() ?: 0)
        return result
    }

    public override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false
        other as PoLRequest
        if (flags != other.flags) return false
        if (phoneId != other.phoneId) return false
        if (beaconId != other.beaconId) return false
        if (!nonce.contentEquals(other.nonce)) return false
        if (!phonePk.contentEquals(other.phonePk)) return false
        if (!phoneSig.contentEquals(other.phoneSig)) return false
        return true
    }
}

/**
 * Response sent from the beacon back to the phone during a PoL transaction.
 *
 * @property flags Protocol-specific flags.
 * @property beaconId The unique ID of the responding beacon.
 * @property counter The beacon internal counter at the time of the transaction.
 * @property nonce The same nonce that was provided in the original [PoLRequest], returned for verification.
 * @property beaconSig The beacon signature.
 */
@OptIn(ExperimentalUnsignedTypes::class)
public data class PoLResponse(
    val flags: UByte,
    val beaconId: UInt,
    val counter: ULong,
    val nonce: UByteArray,
    val beaconSig: UByteArray,
) {
    init {
        require(nonce.size == Constants.PROTOCOL_NONCE) { "Invalid nonce size" }
        require(beaconSig.size == Constants.SIG) { "Invalid signature size" }
    }

    public companion object {

        /** Size in bytes of the data that the beacon effectively signed, including context from the original request. */
        public const val EFFECTIVE_SIGNED_DATA_SIZE: Int =
            Constants.FLAGS + // 1
            Constants.BEACON_ID + // 4
            Constants.BEACON_COUNTER + // 8
            Constants.PROTOCOL_NONCE + // 16
            Constants.PHONE_ID + // 8
            Constants.ED25519_PK + // 32
            Constants.SIG // 64

        /** Total packed size in bytes of a serialized [PoLResponse]. */
        public const val PACKED_SIZE: Int =
            Constants.FLAGS + // 1
            Constants.BEACON_ID + // 4
            Constants.BEACON_COUNTER + // 8
            Constants.PROTOCOL_NONCE + // 16
            Constants.SIG // 64
    }

    public override fun hashCode(): Int {
        var result = flags.hashCode()
        result = 31 * result + beaconId.hashCode()
        result = 31 * result + counter.hashCode()
        result = 31 * result + nonce.contentHashCode()
        result = 31 * result + beaconSig.contentHashCode()
        return result
    }

    public override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false
        other as PoLResponse
        if (flags != other.flags) return false
        if (beaconId != other.beaconId) return false
        if (counter != other.counter) return false
        if (!nonce.contentEquals(other.nonce)) return false
        if (!beaconSig.contentEquals(other.beaconSig)) return false
        return true
    }
}