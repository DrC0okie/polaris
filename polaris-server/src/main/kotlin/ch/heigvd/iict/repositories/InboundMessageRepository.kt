package ch.heigvd.iict.repositories

import ch.heigvd.iict.entities.Beacon
import ch.heigvd.iict.entities.InboundMessage
import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository
import io.quarkus.panache.common.Parameters
import jakarta.enterprise.context.ApplicationScoped

@ApplicationScoped
class InboundMessageRepository : PanacheRepository<InboundMessage> {

    /**
     * Checks if an inbound message from a specific beacon with a specific
     * message ID has already been processed and stored.
     * This is used for idempotency to prevent duplicate processing.
     *
     * @param beacon The source Beacon entity.
     * @param beaconMsgId The message ID generated by the beacon.
     * @return True if a record already exists, false otherwise.
     */
    fun existsByBeaconAndMsgId(beacon: Beacon, beaconMsgId: Long): Boolean {
        return count(
            "beacon = :beacon and beaconMsgId = :beaconMsgId",
            Parameters.with("beacon", beacon)
                .and("beaconMsgId", beaconMsgId)
        ) > 0
    }
}